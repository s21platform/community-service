syntax = "proto3";

option go_package = "pkg/community";

import  "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Service with peers' info from edu platform
service CommunityService {
  // Method for checking that the user is a school 21's student
  rpc IsPeerExist (EmailIn) returns (EmailOut);
  rpc SearchPeers (SearchPeersIn) returns (SearchPeersOut){};
  rpc GetPeerSchoolData(GetSchoolDataIn) returns (GetSchoolDataOut){};
  rpc isUserStaff(LoginIn) returns (IsUserStaffOut){};
  rpc RunLoginsWorkerManually(google.protobuf.Empty) returns (google.protobuf.Empty){};
  rpc SendEduLinkingCode(SendEduLinkingCodeIn) returns (google.protobuf.Empty){};
  // Ручка получения данных школьников
  rpc GetStudentData(GetStudentDataIn) returns (GetStudentDataOut){};
  // Ручка подтверждения кода
  rpc ValidateCode(ValidateCodeIn) returns (ValidateCodeOut){};
}

message IsUserStaffOut {
  bool isStaff = 1;
}

message LoginIn {
  string login = 1;
}

message GetSchoolDataIn {
  string nickName = 1;
}

message GetSchoolDataOut {
  string className = 1;
  string parallelName = 2;
}

// Data for searching for matches in peers' info
message EmailIn {
  // User's E-mail address
  string email = 1;
}

// Response with found match
message EmailOut {
  bool isExist = 1;
}

message SearchPeersIn {
  string substring = 1;
  int64 limit = 2;
  int64 offset = 3;
}

message SearchPeer {
  string login = 1;
}

message SearchPeersOut {
  repeated SearchPeer searchPeers = 1;
}

message SendEduLinkingCodeIn {
  string login = 1;
}

message ParticipantChangeEvent {
  string login = 1;

  oneof old_value {
    string old_value_str = 2;
    int32 old_value_int = 3;
  }

  oneof new_value {
    string new_value_str = 4;
    int32 new_value_int = 5;
  }

  google.protobuf.Timestamp at = 6;
}


message GetStudentDataIn {
  // uuid пользователя, которого запрашивают
  string userUUID = 1;
}

// Навыки студента
message Skill {
  // Название навыка
  string name = 1;
  // Кол-во очков, по данному навыку
  int32 points = 2;
}

// Достижения студента
message Badge {
  // Наименование достижеиня
  string name = 1;
  // Ссылка на иконку
  string icon_url = 2;
  // Дата получения
  string receipt_date_time = 3;
}

message GetStudentDataOut {
  // Логин студента
  string login = 1;
  // Id кампуса
  int64 campusId = 2;
  // Название класса/группы
  string className = 3;
  // Наименование волны
  string parallelName = 4;
  // Id трайба
  int64 tribeId = 5;
  // Статус
  string status = 6;
  // Время зачисления
  string created_at = 7;
  // Кол-во опыта
  int64 exp_value = 8;
  // Уровень
  int64 level = 9;
  // Кол-во опыта до следующего лвл
  int64 exp_to_next_level = 10;
  // Кол-во поинтов для проверок
  int64 crp = 11;
  // Навыки студента
  repeated Skill skills = 12;
  // Кол-во поинтов для ревью
  int64 prp = 13;
  // Кол-во валюты
  int64 coins = 14;
  // Достижения студента
  repeated Badge badges = 15;
}

message ValidateCodeIn {
  // Логин
  string login = 1;
  // Код
  int64 code = 2;
}

message ValidateCodeOut {
  // Сообщение
  string message = 2;
}