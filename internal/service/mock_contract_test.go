// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	config "github.com/s21platform/community-service/internal/config"
	model "github.com/s21platform/community-service/internal/model"
	community "github.com/s21platform/community-service/pkg/community"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// GetIdFromParticipant mocks base method.
func (m *MockDbRepo) GetIdFromParticipant(ctx context.Context, login string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdFromParticipant", ctx, login)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdFromParticipant indicates an expected call of GetIdFromParticipant.
func (mr *MockDbRepoMockRecorder) GetIdFromParticipant(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdFromParticipant", reflect.TypeOf((*MockDbRepo)(nil).GetIdFromParticipant), ctx, login)
}

// GetIdPeer mocks base method.
func (m *MockDbRepo) GetIdPeer(ctx context.Context, uuid string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdPeer", ctx, uuid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdPeer indicates an expected call of GetIdPeer.
func (mr *MockDbRepoMockRecorder) GetIdPeer(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdPeer", reflect.TypeOf((*MockDbRepo)(nil).GetIdPeer), ctx, uuid)
}

// GetPeerData mocks base method.
func (m *MockDbRepo) GetPeerData(ctx context.Context, id int64) (*model.ParticipantData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerData", ctx, id)
	ret0, _ := ret[0].(*model.ParticipantData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerData indicates an expected call of GetPeerData.
func (mr *MockDbRepoMockRecorder) GetPeerData(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerData", reflect.TypeOf((*MockDbRepo)(nil).GetPeerData), ctx, id)
}

// GetPeerSchoolData mocks base method.
func (m *MockDbRepo) GetPeerSchoolData(ctx context.Context, nickName string) (model.PeerSchoolData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerSchoolData", ctx, nickName)
	ret0, _ := ret[0].(model.PeerSchoolData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerSchoolData indicates an expected call of GetPeerSchoolData.
func (mr *MockDbRepoMockRecorder) GetPeerSchoolData(ctx, nickName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerSchoolData", reflect.TypeOf((*MockDbRepo)(nil).GetPeerSchoolData), ctx, nickName)
}

// GetPeerStatus mocks base method.
func (m *MockDbRepo) GetPeerStatus(ctx context.Context, login string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerStatus", ctx, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerStatus indicates an expected call of GetPeerStatus.
func (mr *MockDbRepoMockRecorder) GetPeerStatus(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerStatus", reflect.TypeOf((*MockDbRepo)(nil).GetPeerStatus), ctx, login)
}

// GetStaffId mocks base method.
func (m *MockDbRepo) GetStaffId(ctx context.Context, login string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaffId", ctx, login)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaffId indicates an expected call of GetStaffId.
func (mr *MockDbRepoMockRecorder) GetStaffId(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaffId", reflect.TypeOf((*MockDbRepo)(nil).GetStaffId), ctx, login)
}

// InsertLinkEdu mocks base method.
func (m *MockDbRepo) InsertLinkEdu(ctx context.Context, id int64, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLinkEdu", ctx, id, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLinkEdu indicates an expected call of InsertLinkEdu.
func (mr *MockDbRepoMockRecorder) InsertLinkEdu(ctx, id, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLinkEdu", reflect.TypeOf((*MockDbRepo)(nil).InsertLinkEdu), ctx, id, uuid)
}

// SearchPeersBySubstring mocks base method.
func (m *MockDbRepo) SearchPeersBySubstring(ctx context.Context, substring string) ([]*community.SearchPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPeersBySubstring", ctx, substring)
	ret0, _ := ret[0].([]*community.SearchPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPeersBySubstring indicates an expected call of SearchPeersBySubstring.
func (mr *MockDbRepoMockRecorder) SearchPeersBySubstring(ctx, substring interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPeersBySubstring", reflect.TypeOf((*MockDbRepo)(nil).SearchPeersBySubstring), ctx, substring)
}

// MockRedisRepo is a mock of RedisRepo interface.
type MockRedisRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepoMockRecorder
}

// MockRedisRepoMockRecorder is the mock recorder for MockRedisRepo.
type MockRedisRepoMockRecorder struct {
	mock *MockRedisRepo
}

// NewMockRedisRepo creates a new mock instance.
func NewMockRedisRepo(ctrl *gomock.Controller) *MockRedisRepo {
	mock := &MockRedisRepo{ctrl: ctrl}
	mock.recorder = &MockRedisRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepo) EXPECT() *MockRedisRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRedisRepo) Delete(ctx context.Context, key config.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, key)
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisRepoMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisRepo)(nil).Delete), ctx, key)
}

// GetByKey mocks base method.
func (m *MockRedisRepo) GetByKey(ctx context.Context, key config.Key) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockRedisRepoMockRecorder) GetByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockRedisRepo)(nil).GetByKey), ctx, key)
}

// Set mocks base method.
func (m *MockRedisRepo) Set(ctx context.Context, key config.Key, value string, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisRepoMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisRepo)(nil).Set), ctx, key, value, expiration)
}

// MockNotificationS is a mock of NotificationS interface.
type MockNotificationS struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSMockRecorder
}

// MockNotificationSMockRecorder is the mock recorder for MockNotificationS.
type MockNotificationSMockRecorder struct {
	mock *MockNotificationS
}

// NewMockNotificationS creates a new mock instance.
func NewMockNotificationS(ctrl *gomock.Controller) *MockNotificationS {
	mock := &MockNotificationS{ctrl: ctrl}
	mock.recorder = &MockNotificationSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationS) EXPECT() *MockNotificationSMockRecorder {
	return m.recorder
}

// SendEduCode mocks base method.
func (m *MockNotificationS) SendEduCode(ctx context.Context, email, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEduCode", ctx, email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEduCode indicates an expected call of SendEduCode.
func (mr *MockNotificationSMockRecorder) SendEduCode(ctx, email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEduCode", reflect.TypeOf((*MockNotificationS)(nil).SendEduCode), ctx, email, code)
}
