// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: api/community.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommunityService_IsPeerExist_FullMethodName             = "/CommunityService/IsPeerExist"
	CommunityService_SearchPeers_FullMethodName             = "/CommunityService/SearchPeers"
	CommunityService_GetPeerSchoolData_FullMethodName       = "/CommunityService/GetPeerSchoolData"
	CommunityService_IsUserStaff_FullMethodName             = "/CommunityService/isUserStaff"
	CommunityService_RunLoginsWorkerManually_FullMethodName = "/CommunityService/RunLoginsWorkerManually"
)

// CommunityServiceClient is the client API for CommunityService workers.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service with peers' info from edu platform
type CommunityServiceClient interface {
	// Method for checking that the user is a school 21's student
	IsPeerExist(ctx context.Context, in *EmailIn, opts ...grpc.CallOption) (*EmailOut, error)
	SearchPeers(ctx context.Context, in *SearchPeersIn, opts ...grpc.CallOption) (*SearchPeersOut, error)
	GetPeerSchoolData(ctx context.Context, in *GetSchoolDataIn, opts ...grpc.CallOption) (*GetSchoolDataOut, error)
	IsUserStaff(ctx context.Context, in *LoginIn, opts ...grpc.CallOption) (*IsUserStaffOut, error)
	RunLoginsWorkerManually(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type communityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServiceClient(cc grpc.ClientConnInterface) CommunityServiceClient {
	return &communityServiceClient{cc}
}

func (c *communityServiceClient) IsPeerExist(ctx context.Context, in *EmailIn, opts ...grpc.CallOption) (*EmailOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailOut)
	err := c.cc.Invoke(ctx, CommunityService_IsPeerExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) SearchPeers(ctx context.Context, in *SearchPeersIn, opts ...grpc.CallOption) (*SearchPeersOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPeersOut)
	err := c.cc.Invoke(ctx, CommunityService_SearchPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetPeerSchoolData(ctx context.Context, in *GetSchoolDataIn, opts ...grpc.CallOption) (*GetSchoolDataOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchoolDataOut)
	err := c.cc.Invoke(ctx, CommunityService_GetPeerSchoolData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) IsUserStaff(ctx context.Context, in *LoginIn, opts ...grpc.CallOption) (*IsUserStaffOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsUserStaffOut)
	err := c.cc.Invoke(ctx, CommunityService_IsUserStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RunLoginsWorkerManually(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CommunityService_RunLoginsWorkerManually_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServiceServer is the server API for CommunityService workers.
// All implementations must embed UnimplementedCommunityServiceServer
// for forward compatibility.
//
// Service with peers' info from edu platform
type CommunityServiceServer interface {
	// Method for checking that the user is a school 21's student
	IsPeerExist(context.Context, *EmailIn) (*EmailOut, error)
	SearchPeers(context.Context, *SearchPeersIn) (*SearchPeersOut, error)
	GetPeerSchoolData(context.Context, *GetSchoolDataIn) (*GetSchoolDataOut, error)
	IsUserStaff(context.Context, *LoginIn) (*IsUserStaffOut, error)
	RunLoginsWorkerManually(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCommunityServiceServer()
}

// UnimplementedCommunityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommunityServiceServer struct{}

func (UnimplementedCommunityServiceServer) IsPeerExist(context.Context, *EmailIn) (*EmailOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPeerExist not implemented")
}
func (UnimplementedCommunityServiceServer) SearchPeers(context.Context, *SearchPeersIn) (*SearchPeersOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPeers not implemented")
}
func (UnimplementedCommunityServiceServer) GetPeerSchoolData(context.Context, *GetSchoolDataIn) (*GetSchoolDataOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerSchoolData not implemented")
}
func (UnimplementedCommunityServiceServer) IsUserStaff(context.Context, *LoginIn) (*IsUserStaffOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserStaff not implemented")
}
func (UnimplementedCommunityServiceServer) RunLoginsWorkerManually(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunLoginsWorkerManually not implemented")
}
func (UnimplementedCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {}
func (UnimplementedCommunityServiceServer) testEmbeddedByValue()                          {}

// UnsafeCommunityServiceServer may be embedded to opt out of forward compatibility for this workers.
// Use of this interface is not recommended, as added methods to CommunityServiceServer will
// result in compilation errors.
type UnsafeCommunityServiceServer interface {
	mustEmbedUnimplementedCommunityServiceServer()
}

func RegisterCommunityServiceServer(s grpc.ServiceRegistrar, srv CommunityServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommunityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommunityService_ServiceDesc, srv)
}

func _CommunityService_IsPeerExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).IsPeerExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_IsPeerExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).IsPeerExist(ctx, req.(*EmailIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_SearchPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPeersIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).SearchPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_SearchPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).SearchPeers(ctx, req.(*SearchPeersIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetPeerSchoolData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchoolDataIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetPeerSchoolData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetPeerSchoolData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetPeerSchoolData(ctx, req.(*GetSchoolDataIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_IsUserStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).IsUserStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_IsUserStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).IsUserStaff(ctx, req.(*LoginIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RunLoginsWorkerManually_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RunLoginsWorkerManually(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RunLoginsWorkerManually_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RunLoginsWorkerManually(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityService_ServiceDesc is the grpc.ServiceDesc for CommunityService workers.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommunityService",
	HandlerType: (*CommunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsPeerExist",
			Handler:    _CommunityService_IsPeerExist_Handler,
		},
		{
			MethodName: "SearchPeers",
			Handler:    _CommunityService_SearchPeers_Handler,
		},
		{
			MethodName: "GetPeerSchoolData",
			Handler:    _CommunityService_GetPeerSchoolData_Handler,
		},
		{
			MethodName: "isUserStaff",
			Handler:    _CommunityService_IsUserStaff_Handler,
		},
		{
			MethodName: "RunLoginsWorkerManually",
			Handler:    _CommunityService_RunLoginsWorkerManually_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/community.proto",
}
